#include "Piece.h"

const char G_PIECES[7 /* pieces */][4 /* rotations */][5 /* columns */][5 /* rows */] = 
{
	// SQUARE
	{
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 2, 1, 0},
			{0, 0, 1, 1, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 2, 1, 0},
			{0, 0, 1, 1, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 2, 1, 0},
			{0, 0, 1, 1, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 2, 1, 0},
			{0, 0, 1, 1, 0},
			{0, 0, 0, 0, 0}
		}
	},
	// I
	{
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 1, 2, 1, 1},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 2, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 1, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{1, 1, 2, 1, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 1, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 2, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 0, 0, 0}
		}
	},
	// L
	{
		{
			{0, 0, 0, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 2, 0, 0},
			{0, 0, 1, 1, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 1, 2, 1, 0},
			{0, 1, 0, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 1, 1, 0, 0},
			{0, 0, 2, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 1, 0},
			{0, 1, 2, 1, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0}
		}
	},
	// L_MIRRORED
	{
		{
			{0, 0, 0, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 2, 0, 0},
			{0, 1, 1, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 1, 0, 0, 0},
			{0, 1, 2, 1, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 1, 1, 0},
			{0, 0, 2, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 1, 2, 1, 0},
			{0, 0, 0, 1, 0},
			{0, 0, 0, 0, 0}
		}
	},
	// N
	{
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 1, 0},
			{0, 0, 2, 1, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 1, 2, 0, 0},
			{0, 0, 1, 1, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 1, 2, 0, 0},
			{0, 1, 0, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 1, 1, 0, 0},
			{0, 0, 2, 1, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0}
		}
	},
	// N_MIRRORED
	{
		{
			{0, 0, 0, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 2, 1, 0},
			{0, 0, 0, 1, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 2, 1, 0},
			{0, 1, 1, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 1, 0, 0, 0},
			{0, 1, 2, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 1, 1, 0},
			{0, 1, 2, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0}
		}
	},
	// T
	{
		{
			{0, 0, 0, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 2, 1, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0},
			{0, 1, 2, 1, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 1, 2, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 0, 0, 0, 0}
		},
		{
			{0, 0, 0, 0, 0},
			{0, 0, 1, 0, 0},
			{0, 1, 2, 1, 0},
			{0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0}
		}
	}
};

// const char G_PIECES_LIMIT[7 /* pieces */][4 /* rotations */][4 /* directions */][2 /* limits */] =
// {
// 		// SQUARE
// 	{
// 		{
// 			{2, 2},
// 			{3, 2}, 
// 			{2, 3},
// 			{2, 2}
// 		},
// 		{
// 			{2, 2},
// 			{3, 2}, 
// 			{2, 3},
// 			{2, 2}
// 		},
// 		{
// 			{2, 2},
// 			{3, 2}, 
// 			{2, 3},
// 			{2, 2}
// 		},
// 		{
// 			{2, 2},
// 			{3, 2}, 
// 			{2, 3},
// 			{2, 2}
// 		}
// 	},
// 	// I
// 	{
// 		{
// 			{2, 2},
// 			{4, 2},
// 			{2, 2},
// 			{1, 2}
// 		},
// 		{
// 			{2, 1},
// 			{2, 2},
// 			{2, 4},
// 			{2, 2}
// 		},
// 		{
// 			{2, 2}, 
// 			{3, 2},
// 			{2, 2},
// 			{0, 2}
// 		},
// 		{
// 			{0, 2},
// 			{2, 2},
// 			{3, 2},
// 			{2, 2}
// 		}
// 	},
// 	// L
// 	{
// 		{
// 			{2, 1},
// 			{3, 3},
// 			{2, 3},
// 			{2, 2}
// 		},
// 		{
// 			{2, 2},
// 			{3, 2},
// 			{1, 3},
// 			{1, 2}
// 		},
// 		{
// 			{2, 1},
// 			{2, 2},
// 			{2, 3},
// 			{1, 1}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 0, 1, 0},
// 			{0, 1, 2, 1, 0},
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		}
// 	},
// 	// L_MIRRORED
// 	{
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 0, 2, 0, 0},
// 			{0, 1, 1, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 1, 0, 0, 0},
// 			{0, 1, 2, 1, 0},
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 1, 1, 0},
// 			{0, 0, 2, 0, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 0, 0, 0},
// 			{0, 1, 2, 1, 0},
// 			{0, 0, 0, 1, 0},
// 			{0, 0, 0, 0, 0}
// 		}
// 	},
// 	// N
// 	{
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 0, 1, 0},
// 			{0, 0, 2, 1, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 0, 0, 0},
// 			{0, 1, 2, 0, 0},
// 			{0, 0, 1, 1, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 1, 2, 0, 0},
// 			{0, 1, 0, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 1, 1, 0, 0},
// 			{0, 0, 2, 1, 0},
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		}
// 	},
// 	// N_MIRRORED
// 	{
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 0, 2, 1, 0},
// 			{0, 0, 0, 1, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 2, 1, 0},
// 			{0, 1, 1, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 1, 0, 0, 0},
// 			{0, 1, 2, 0, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 1, 1, 0},
// 			{0, 1, 2, 0, 0},
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		}
// 	},
// 	// T
// 	{
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 0, 2, 1, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 0, 0, 0},
// 			{0, 1, 2, 1, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 1, 2, 0, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		},
// 		{
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 1, 0, 0},
// 			{0, 1, 2, 1, 0},
// 			{0, 0, 0, 0, 0},
// 			{0, 0, 0, 0, 0}
// 		}
// 	}
// };

Piece::Piece(ePieceType pieceType)
{
	Piece(pieceType, eRotationType::UP);
}

Piece::Piece(ePieceType pieceType, eRotationType rotationType)
	: mPieceType(pieceType),
	mRotationType(rotationType)
{
	for (unsigned char column = 0; column < 5; ++column)
	{
		for (unsigned char row = 0; row < 5; ++row)
		{
			mPiece[column][row] = G_PIECES[static_cast<unsigned char>(mPieceType)][static_cast<unsigned char>(mRotationType)][column][row];
		}
	}
}

const ePieceType& Piece::GetPieceType() const
{
	return mPieceType;
}

const eRotationType& Piece::GetRotationType() const
{
	return mRotationType;
}

const char& Piece::GetBlock(unsigned char x, unsigned char y) const
{
	if (x >= 5)
	{
		x = x % 5;
	}

	if (y >= 5)
	{
		y = y % 5;
	}

	return mPiece[y][x];
}
